{"version":3,"sources":["main/ContextStore.ts","main/ChildContext.tsx","main/Context.tsx","main/Hooks.tsx","main/Choices.tsx","main/MainApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["store","ThemeContext","React","ChildContext","react","ContextStore","Consumer","value","Context","_React$useState","_React$useState2","Object","slicedToArray","theme","setTheme","Provider","onClick","Hooks","count","setCount","a","Math","random","console","log","document","title","concat","Lazy","__webpack_require__","e","then","bind","Choices","props","type","fallback","MainApp","choices","setChoices","name","onChange","target","map","key","App","react_default","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAQeA,EAJD,CACZC,aAHmBC,gBAAoB,UCCzCC,EAAA,WAAe,OACbC,EAAA,yBACEA,EAAA,yCACAA,EAAA,cAACC,EAAMJ,aAAaK,SAApB,KACG,SAAAC,GAAK,OAAIH,EAAA,wBAAKG,OCHrBC,EAAA,WAAqB,IAAAC,EACOP,WAAe,QADtBQ,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACZI,EADYH,EAAA,GACLI,EADKJ,EAAA,GAKnB,OACEN,EAAA,cAACC,EAAMJ,aAAac,SAApB,CAA6BR,MAAOM,GAClCT,EAAA,yBACEA,EAAA,mCACAA,EAAA,wBAAQY,QANM,kBAAMF,EAAmB,SAAVD,EAAmB,QAAU,UAM1D,UACAT,EAAA,cAACD,EAAD,SCZOc,EAAA,WAAM,IAAAR,EACOP,WAAe,GADtBQ,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACZS,EADYR,EAAA,GACLS,EADKT,EAAA,GAGbU,EAAIC,KAAKC,SAYf,OAVApB,YACE,WAGEqB,QAAQC,IAAI,UACZC,SAASC,MAAT,GAAAC,OAAoBP,IAEtB,CAACF,IAIDd,EAAA,yBACEA,EAAA,sCAAgBc,EAAhB,UACAd,EAAA,wBAAQY,QAAS,kBAAMG,EAASD,EAAQ,KAAxC,cCjBAU,EAAO1B,OAAW,kBAAM2B,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAMfC,EAAA,SAACC,GACd,OAAQA,EAAMC,MACZ,IAAK,UACH,OACE/B,EAAA,yBACEA,EAAA,oCAGN,IAAK,WACH,OACEA,EAAA,cAACA,EAAA,SAAD,CAAgBgC,SAAUhC,EAAA,wCACxBA,EAAA,cAACwB,EAAD,OAGN,IAAK,UACH,OAAOxB,EAAA,cAACI,EAAD,MACT,IAAK,QACH,OAAOJ,EAAA,cAACa,EAAD,MACT,QACE,OACEb,EAAA,yBACEA,EAAA,uCC3BKiC,EAAA,WAAM,IAAA5B,EACWP,WAAe,WAD1BQ,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACZ6B,EADY5B,EAAA,GACH6B,EADG7B,EAAA,GAMnB,OACEN,EAAA,yBACEA,EAAA,gDACAA,EAAA,wBAAQoC,KAAK,UAAUjC,MAAO+B,EAASG,SAPtB,SAACX,GAAD,OACnBS,EAAYT,EAAEY,OAAenC,SAEZ,CAAC,UAAW,WAAY,UAAW,SAKpCoC,IAAI,SAAAH,GAAI,OAClBpC,EAAA,wBAAQwC,IAAKJ,EAAMjC,MAAOiC,GACvBA,MAIPpC,EAAA,cAAC6B,EAAD,CAASE,KAAMG,MCJNO,mLARX,OACEC,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,OACbF,EAAA1B,EAAA2B,cAACV,EAAD,cAJUY,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAA1B,EAAA2B,cAACU,EAAD,MAAShC,SAASiC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.8e9f4dab.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst ThemeContext = React.createContext(\"light\");\n\nconst store = {\n  ThemeContext\n};\n\nexport default store;\n","import * as React from \"react\";\nimport store from \"./ContextStore\";\n\nexport default () => (\n  <div>\n    <h3>Child Context</h3>\n    <store.ThemeContext.Consumer>\n      {value => <h2>{value}</h2>}\n    </store.ThemeContext.Consumer>\n  </div>\n);\n","import * as React from \"react\";\nimport store from \"./ContextStore\";\nimport ChildContext from \"./ChildContext\";\n\nexport default () => {\n  const [theme, setTheme] = React.useState(\"dark\");\n\n  const handleClick = () => setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n\n  return (\n    <store.ThemeContext.Provider value={theme}>\n      <div>\n        <h1>Context</h1>\n        <button onClick={handleClick}>Toggle</button>\n        <ChildContext />\n      </div>\n    </store.ThemeContext.Provider>\n  );\n};\n","import * as React from \"react\";\n\nexport default () => {\n  const [count, setCount] = React.useState(0);\n\n  const a = Math.random();\n  // Similar to componentDidMount and componentDidUpdate:\n  React.useEffect(\n    () => {\n      // Update the document title using the browser API\n      // document.title = `You clicked ${count} times`;\n      console.log(\"effect\");\n      document.title = `${a}`;\n    },\n    [count]\n  );\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport Context from \"./Context\";\nimport Hooks from \"./Hooks\";\nconst Lazy = React.lazy(() => import(\"./Lazy\"));\n\ninterface IProps {\n  type: string;\n}\n\nexport default (props: IProps) => {\n  switch (props.type) {\n    case \"default\":\n      return (\n        <div>\n          <h1>Default</h1>\n        </div>\n      );\n    case \"suspense\":\n      return (\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <Lazy />\n        </React.Suspense>\n      );\n    case \"context\":\n      return <Context />;\n    case \"hooks\":\n      return <Hooks />;\n    default:\n      return (\n        <div>\n          <h1>notfound</h1>\n        </div>\n      );\n  }\n};\n","import * as React from \"react\";\nimport Choices from \"./Choices\";\n\nexport default () => {\n  const [choices, setChoices] = React.useState(\"default\");\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) =>\n    setChoices((e.target as any).value);\n\n  const choicesArr = [\"default\", \"suspense\", \"context\", \"hooks\"];\n  return (\n    <div>\n      <div>React V16.8.0-alpha</div>\n      <select name=\"choices\" value={choices} onChange={handleChange}>\n        {choicesArr.map(name => (\n          <option key={name} value={name}>\n            {name}\n          </option>\n        ))}\n      </select>\n      <Choices type={choices} />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MainApp from \"./main/MainApp\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}